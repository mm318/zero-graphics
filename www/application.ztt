<!doctype html>
<html lang="en">

<head>
    <meta charset=" utf-8">
    <title><? try output.writeAll(context.display_name); ?></title>

    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            background: #444;
            color: #98ffb1;
        }

        canvas {
            box-sizing: border-box;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            padding: 2px;

        }

    </style>

    <script type="module" defer="true">
        import { createPlatformEnvironment, createInputModule, createWebGlModule, createWebsocketModule } from "./zero-graphics.js";

        const canvas_element = document.getElementById("render-canvas");
        var globalInstance;

        let imports = {
            env: createPlatformEnvironment(() => globalInstance),
            webgl: createWebGlModule(canvas_element, () => globalInstance),
            input: createInputModule(canvas_element, () => globalInstance),
            websocket: createWebsocketModule(() => globalInstance),
        };

        fetch("<? try output.writeAll(context.app_name); ?>.wasm")
            .then((response) => response.arrayBuffer())
            .then((bytes) => WebAssembly.instantiate(bytes, imports))
            .then((results) => results.instance)
            .then((instance) => {
                globalInstance = instance;
                let res = instance.exports.app_init();
                if (res == 0) {

                    // run the update loop until the app dies
                    function update() {
                        const styles = window.getComputedStyle(canvas_element);

                        const dx = parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight);
                        const dy = parseFloat(styles.paddingTop) + parseFloat(styles.paddingBottom);

                        canvas_element.width = window.devicePixelRatio * (canvas_element.clientWidth - dx);
                        canvas_element.height = window.devicePixelRatio * (canvas_element.clientHeight - dy);

                        let res = instance.exports.app_update();
                        if (res == 0) {
                            requestAnimationFrame(update);
                        } else {
                            console.log("app_update returned ", res);
                        }
                    }

                    requestAnimationFrame(update);
                }
                else {
                    console.log("app_init returned ", res);
                }
            });
    </script>
</head>

<body>
    <canvas id="render-canvas" tabindex="1">
    </canvas>
</body>

</html>
